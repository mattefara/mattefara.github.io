"use strict";(self.webpackChunkhomelab_blog=self.webpackChunkhomelab_blog||[]).push([[980],{3376:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>l});var i=n(4848),a=n(8453);const s={},r="Vault",c={id:"secrets-management/vault",title:"Vault",description:"Vault is the tool chosen for managing secrets within the Kubernetes cluster.",source:"@site/docs/secrets-management/vault.md",sourceDirName:"secrets-management",slug:"/secrets-management/vault",permalink:"/docs/secrets-management/vault",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"External Secret Operator",permalink:"/docs/secrets-management/eso"}},o={},l=[{value:"Managing Root Certificates",id:"managing-root-certificates",level:2},{value:"Managing Intermediate Certificates",id:"managing-intermediate-certificates",level:2},{value:"Managing Secrets",id:"managing-secrets",level:2}];function d(e){const t={a:"a",h1:"h1",h2:"h2",p:"p",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"vault",children:"Vault"}),"\n",(0,i.jsx)(t.p,{children:"Vault is the tool chosen for managing secrets within the Kubernetes cluster."}),"\n",(0,i.jsx)(t.p,{children:"Initially, it was chosen for certificate management. In fact, every certificate can be generated and retrieved using this tool."}),"\n",(0,i.jsx)(t.p,{children:"Everything is managed and maintained with Terraform, including secret and certificate definition."}),"\n",(0,i.jsx)(t.h2,{id:"managing-root-certificates",children:"Managing Root Certificates"}),"\n",(0,i.jsx)(t.p,{children:"At the moment, the tool stores the self-signed root certificate used by the Ingress controller."}),"\n",(0,i.jsx)(t.p,{children:"Every secret needed by the Ingress controller is automatically generated from this root certificate using cert-manager. Because it is a self-signed certificate, it must be trusted before being considered valid."}),"\n",(0,i.jsx)(t.p,{children:"Once generated, it is manually imported into my development machine so that I can connect with SSL. However, currently, this is only possible locally because Proxmox is not exposed to the internet."}),"\n",(0,i.jsx)(t.h2,{id:"managing-intermediate-certificates",children:"Managing Intermediate Certificates"}),"\n",(0,i.jsx)(t.p,{children:"It is planned to test Istio as a service mesh with Vault integration."}),"\n",(0,i.jsx)(t.p,{children:"Vault is responsible for generating a root certificate and an intermediate certificate, which are then used by Istio CA for issuing certificates used by the Kubernetes services."}),"\n",(0,i.jsx)(t.p,{children:"Using this method, mTLS can be enabled."}),"\n",(0,i.jsx)(t.h2,{id:"managing-secrets",children:"Managing Secrets"}),"\n",(0,i.jsxs)(t.p,{children:["Vault can manage secrets. Every secret is versioned, and with the use of the ",(0,i.jsx)(t.a,{href:"../eso",children:"External Secret Operator"}),", it is synced in Kubernetes as a secret."]})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>c});var i=n(6540);const a={},s=i.createContext(a);function r(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);