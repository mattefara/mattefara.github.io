"use strict";(self.webpackChunkhomelab_blog=self.webpackChunkhomelab_blog||[]).push([[495],{2868:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var i=n(4848),s=n(8453);const r={sidebar_position:2},o="Cluster Setup",a={id:"cluster-setup",title:"Cluster Setup",description:"Currently, the server is an old single machine running Proxmox.",source:"@site/docs/cluster-setup.md",sourceDirName:".",slug:"/cluster-setup",permalink:"/docs/cluster-setup",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Homelab Introduction",permalink:"/docs/intro"},next:{title:"Cluster management",permalink:"/docs/category/cluster-management"}},l={},c=[{value:"Kubernetes Installation",id:"kubernetes-installation",level:2},{value:"Maintainability",id:"maintainability",level:2},{value:"Ingress and External Access",id:"ingress-and-external-access",level:2},{value:"DNS Autoconfiguration",id:"dns-autoconfiguration",level:3}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"cluster-setup",children:"Cluster Setup"}),"\n",(0,i.jsx)(t.p,{children:"Currently, the server is an old single machine running Proxmox."}),"\n",(0,i.jsx)(t.p,{children:"Inside Proxmox, there are two VMs:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Kubernetes node (k3s)"}),"\n",(0,i.jsx)(t.li,{children:"DNS server (Pi-hole)"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Currently, everything is installed through Kubernetes (except Pi-hole) without the need for additional tools like Docker Compose."}),"\n",(0,i.jsx)(t.p,{children:"A DNS server is utilized for Ingress routing, residing solely within the LAN to maintain cluster privacy with Pi-hole."}),"\n",(0,i.jsx)(t.h2,{id:"kubernetes-installation",children:"Kubernetes Installation"}),"\n",(0,i.jsx)(t.p,{children:"K3s is the chosen Kubernetes distribution for my homelab due to its lightweight nature, ideal for limited resources."}),"\n",(0,i.jsx)(t.p,{children:"To initiate the cluster, use the utility script in the docs:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"curl -sfL https://get.k3s.io | sh -\n"})}),"\n",(0,i.jsxs)(t.p,{children:["The cluster is currently a single-node installation with default CNI and Ingress controller (Traefik). After installation, the YAML config can be exported from the node and utilized on remote machines with ",(0,i.jsx)(t.code,{children:"kubectl"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"maintainability",children:"Maintainability"}),"\n",(0,i.jsxs)(t.p,{children:["Cluster updates and maintenance are automated through ",(0,i.jsx)(t.a,{href:"https://docs.k3s.io/upgrades/automated",children:"automated upgrades"})," via the system-upgrade-controller and k3s-upgrade."]}),"\n",(0,i.jsx)(t.h2,{id:"ingress-and-external-access",children:"Ingress and External Access"}),"\n",(0,i.jsxs)(t.p,{children:["Application needs may necessitate changes in Ingress usage and exposure. Typically, endpoints are private, accessible only within the LAN. This setup is facilitated by a DNS server within the local network, specifically ",(0,i.jsx)(t.a,{href:"https://pi-hole.net/",children:"Pi-hole"}),", deployed as a Docker container on another VM within Proxmox. This VM exposes a private IP address, enabling local computers to resolve hosts."]}),"\n",(0,i.jsx)(t.h3,{id:"dns-autoconfiguration",children:"DNS Autoconfiguration"}),"\n",(0,i.jsxs)(t.p,{children:["Every Ingress resource is exposed within the local network. This is achieved automatically through ",(0,i.jsx)(t.a,{href:"https://github.com/kubernetes-sigs/external-dns",children:"external-dns"}),", configurable with Pi-hole. Upon installation via Helm, it can be configured with the admin token generated by Pi-hole, enabling the pod to interact with Pi-hole REST APIs, adding DNS records as required."]}),"\n",(0,i.jsx)(t.p,{children:'The DNS record creation policy used in Pi-hole is "upsert": when a new Ingress resource is processed, a new DNS record is added, but if it\'s deleted, it remains in Pi-hole. This strategy allows other DNS records defined outside Kubernetes to coexist on the DNS server.'}),"\n",(0,i.jsx)(t.p,{children:"If Pi-hole is set as the default DNS through the router, machines within the LAN can resolve DNS records."}),"\n",(0,i.jsx)(t.p,{children:"In the future, a solution will be tested using two external-dns instances, one for Pi-hole and the other for external services like Cloudflare, enabling some applications to be publicly available."})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var i=n(6540);const s={},r=i.createContext(s);function o(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);